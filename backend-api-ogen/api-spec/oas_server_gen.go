// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddPost implements POST /add operation.
	//
	// Add two numbers.
	//
	// POST /add
	AddPost(ctx context.Context, req *AddPostReq) (AddPostRes, error)
	// DividePost implements POST /divide operation.
	//
	// Divide two numbers.
	//
	// POST /divide
	DividePost(ctx context.Context, req *DividePostReq) (DividePostRes, error)
	// MultiplyPost implements POST /multiply operation.
	//
	// Multiply two numbers.
	//
	// POST /multiply
	MultiplyPost(ctx context.Context, req *MultiplyPostReq) (MultiplyPostRes, error)
	// SubtractPost implements POST /subtract operation.
	//
	// Subtract two numbers.
	//
	// POST /subtract
	SubtractPost(ctx context.Context, req *SubtractPostReq) (SubtractPostRes, error)
	// SumPost implements POST /sum operation.
	//
	// Add all numbers in an array.
	//
	// POST /sum
	SumPost(ctx context.Context, req []float64) (SumPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
